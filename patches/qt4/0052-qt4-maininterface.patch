--- a/modules/gui/qt4/main_interface.cpp	2019-06-04 00:15:18.909713000 +0300
+++ b/modules/gui/qt4/main_interface.cpp.new	2019-06-04 00:56:44.218569625 +0300
@@ -946,18 +946,31 @@
 
         /* */
         displayNormalView();
-        setInterfaceFullScreen( true );
+        if( b_videoEmbedded ) {
+            setInterfaceFullScreen( true );
+        }
+        else {
+            videoWidget->setWindowState(videoWidget->windowState() | Qt::WindowFullScreen);
+        }
+        
+        if(THEMIM->getIM()->isP2P() && !THEMIM->getIM()->isAd()) {
+            p2p_RequestLoadUrlAd(THEP2P, P2P_LOAD_URL_WEBSTAT_FULLSCREEN, 0);
+        }
     }
     else
     {
         /* TODO do we want to restore screen and position ? (when
          * qt-fullscreen-screennumber is forced) */
         setMinimalView( b_minimalView );
-        setInterfaceFullScreen( b_interfaceFullScreen );
-#ifdef _WIN32
-        changeThumbbarButtons( THEMIM->getIM()->playingStatus() );
-#endif
+        if( b_videoEmbedded ) {
+            setInterfaceFullScreen( b_interfaceFullScreen );
+        }
+        else {
+            videoWidget->setWindowState( videoWidget->windowState() & ~Qt::WindowFullScreen);
+        }
+        updateMinWidth();
     }
+    emit notifyFullscreenChanged(fs);
     videoWidget->sync();
 }
 
@@ -1580,8 +1593,21 @@
             }
             if( mrl.length() > 0 )
             {
-                Open::openMRL( p_intf, mrl, first, b_playlist );
+                //Open::openMRL( p_intf, mrl, first, b_playlist );
+                p2p_uri_id_type_t p2p_uri_type;
+                p2p_uri_type = p2p_GetIdTypeWithOptString( url.toEncoded().constData(), NULL );
+                if( p2p_uri_type == P2P_TYPE_UNSUPPORT ) {
+                    playlist_Add( THEPL, qtu(mrl), NULL,
+                            PLAYLIST_APPEND | (first ? PLAYLIST_GO: PLAYLIST_PREPARSE),
+                            PLAYLIST_END, b_playlist, pl_Unlocked );
+                }
+                else {
+                    p2p_LoadWithOptString( THEP2P, qtu(mrl), NULL, p2p_uri_type, p2p_LoadAsync, NULL, 
+                                PLAYLIST_APPEND, p2p_LoadAddInput, NULL, 
+                                b_playlist, first, P2P_DEV, P2P_AFF, P2P_ZONE, pl_Unlocked );
+                }
                 first = false;
+                RecentsMRL::getInstance( p_intf )->addRecent( mrl );
             }
         }
     }
@@ -1592,8 +1618,22 @@
     if( !mimeData->hasUrls() && mimeData->hasText() &&
         QUrl(mimeData->text()).isValid() )
     {
-        QString mrl = toURI( mimeData->text() );
-        Open::openMRL( p_intf, mrl, first, b_playlist );
+        //QString mrl = toURI( mimeData->text() );
+        //Open::openMRL( p_intf, mrl, first, b_playlist );
+        p2p_uri_id_type_t p2p_uri_type;
+        p2p_uri_type = p2p_GetIdTypeWithOptString(qtu(mimeData->text()), NULL);
+        if( p2p_uri_type == P2P_TYPE_UNSUPPORT ) {
+            QString mrl = toURI( mimeData->text() );
+            playlist_Add( THEPL, qtu(mrl), NULL,
+                        PLAYLIST_APPEND | (first ? PLAYLIST_GO: PLAYLIST_PREPARSE),
+                        PLAYLIST_END, b_playlist, pl_Unlocked );
+        }
+        else {
+            QString mrl = (p2p_uri_type != P2P_TYPE_PLAYER && p2p_uri_type != P2P_TYPE_RAW) ? toURI( mimeData->text() ) : mimeData->text();
+            p2p_LoadWithOptString( THEP2P, qtu(mrl), NULL, p2p_uri_type, p2p_LoadAsync, NULL, 
+                                PLAYLIST_APPEND, p2p_LoadAddInput, NULL, 
+                                b_playlist, first, P2P_DEV, P2P_AFF, P2P_ZONE, pl_Unlocked );
+        }
     }
     event->accept();
 }
